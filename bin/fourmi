#!/usr/bin/env lua

local colors   = require "term.colors"
local argparse = require "argparse"
local lfs      = require "lfs"

print(
    "üêú  Fourmi 0.0.1 (C) 2019 Benoit Giannangeli"
)

--- Empty ~/.fourmi/tmp
local function cleanup()
    for file in lfs.dir(os.getenv "HOME" .. "/.fourmi/tmp") do
        if file ~= "." and file ~= ".." then
            os.remove(os.getenv "HOME" .. "/.fourmi/tmp/" .. file)
        end
    end
end

-- Make sure ~/.fourmi is there
if not lfs.attributes(os.getenv "HOME" .. "/.fourmi") then
    lfs.mkdir(os.getenv "HOME" .. "/.fourmi")
end

-- Make sure ~/.fourmi/tmp is there
if not lfs.attributes(os.getenv "HOME" .. "/.fourmi/tmp") then
    lfs.mkdir(os.getenv "HOME" .. "/.fourmi/tmp")
end

-- Cleanup in case previous fourmi failed to do so
cleanup()

-- Initialize global table to hold fourmi's variable
_G.__fourmi_vars = {
    tmp = os.getenv "HOME" .. "/.fourmi/tmp"
}

-- Build parser
local parser = argparse()
        :name "fourmi"
        :description "üêú A small taskrunner written in Lua"

-- Plan argument
parser:argument "plan"
    :description "Plan to execute"
    :args "?"

parser:argument "arguments"
    :description "Plan's arguments"
    :args "*"

parser:option "--file -f"
    :description "Specify plan file (if it's not fourmi.plan.lua)"
    :args(1)

-- Parse arguments
local arguments = parser:parse()

local function checkinvalid(condition, message)
    if condition then
        print(colors.red(message))

        os.exit(1)
    end
end

-- Search for fourmi.plan.lua in current directory
local fourmi_filename = arguments.file or "fourmi.plan.lua"
local fourmi_lua = lfs.attributes(fourmi_filename)

checkinvalid(
    not fourmi_lua or fourmi_lua.mode ~= "file",
    "Could not find `fourmi.plan.lua` in current directory."
)

-- Load it
local fourmi_fn, err = loadfile(fourmi_filename)

checkinvalid(not fourmi_fn, "Could not find parse `" .. fourmi_filename .. "`: " .. tostring(err))

-- Run it
local ok, plans = xpcall(fourmi_fn, debug.traceback)

checkinvalid(not ok, "An error occured while running `" .. fourmi_filename .. "`:\n" .. tostring(plan))

if type(plans) ~= "table" then
    checkinvalid("`fourmi.plan.lua` should return a table")
end

-- Run a plan
local function runPlan(plan)
    xpcall(plan, function(err)
        print(colors.red(
            "Plan `" .. plan.__name .. "` failed with error:\n" .. err
        ))
    end, arguments)
end

-- Run first target that matches a key in plan
local defaultPlan

for _, target in ipairs(plans) do
    if target.__name == "all" then
        defaultPlan = target
    end

    if arguments.plan == target.__name then
        runPlan(target)

        os.exit()
    end
end

checkinvalid(not defaultPlan, "No matching plan")

-- Or run default target

-- Plan argument is now part of default plan's arguments
if arguments.plan then
    table.insert(arguments.arguments, 1, arguments.plan)
end

runPlan(defaultPlan)

cleanup()