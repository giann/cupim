#!/usr/bin/env lua

local colors   = require "term.colors"
local argparse = require "argparse"
local lfs      = require "lfs"

print(
    "üêú  Fourmi 0.0.1 (C) 2019 Benoit Giannangeli"
)

local function checkinvalid(condition, message)
    if condition then
        print(colors.red(message))

        os.exit(1)
    end
end

-- Search for fourmi.plan.lua in current directory
local fourmi_lua = lfs.attributes "fourmi.plan.lua"

checkinvalid(
    not fourmi_lua or fourmi_lua.mode ~= "file",
    "Could not find `fourmi.plan.lua` in current directory."
)

-- Load it
local fourmi_fn, err = loadfile "fourmi.plan.lua"

checkinvalid(not fourmi_fn, "Could not find parse `fourmi.plan.lua`: " .. tostring(err))

-- Run it
local ok, plan = xpcall(fourmi_fn, debug.traceback)

checkinvalid(not ok, "An error occured while running `fourmi.plan.lua`:\n" .. tostring(plan))

if type(plan) ~= "table" then
    checkinvalid("`fourmi.plan.lua` should return a table")
end

-- Build parser
local parser = argparse()
        :name "fourmi"
        :description "üêú A small taskrunner written in Lua"

-- Plan argument
parser:argument "plan"
    :description "Plan to execute"
    :args(1)

parser:argument "arguments"
    :description "Plan's arguments"
    :args "*"

-- Parse arguments
local arguments = parser:parse()

-- Run first target that matches a key in plan
local defaultPlan

for _, target in ipairs(plan) do
    if target.__name == "all" then
        defaultPlan = target
    end

    if arguments.plan == target.__name then
        xpcall(target, function(err)
            print(colors.red(
                "Plan `" .. target.__name .. "` failed with error:\n" .. err
            ))
        end, arguments)

        os.exit()
    end
end

checkinvalid(not defaultPlan, "No matching plan")

-- Or run default target

-- Plan argument is now part of default plan's arguments
if arguments.plan then
    table.insert(arguments.arguments, 1, arguments.plan)
end

xpcall(defaultPlan, function(err)
    print(colors.red(
        "Plan `all` failed with error:\n" .. err
    ))
end, arguments)
